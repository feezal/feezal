/* global window, feezal */

import {PolymerElement, html} from '@polymer/polymer/polymer-element.js';

const styleElement = document.createElement('dom-module');

styleElement.innerHTML =
    `<template>
       <style>
        :host {
            display: inline-block;
            box-sizing: border-box;
            overflow: hidden;
        }
        :host([hidden]) {
            display: none;
        }
        :host(.feezal-editable) {
            outline: 1px dashed rgba(250, 120, 0, 0.8);
        }
        :host(.feezal-editable) * {
            pointer-events: none;
        }
        :host(.feezal-editable.feezal-selected) {
            outline: 2px dashed rgba(250, 120, 0, 0.8);
        }
       </style>
     </template>`;

styleElement.register('feezal-style-element');

class FeezalElement extends PolymerElement {
    static get properties() {
        return {
            name: {
                type: String,
                value: '',
                reflectToAttribute: true,
            },
            'selected': {
                type: Boolean,
                value: false
            },
            subscribeTopic: {
                type: String,
                value: '',
                reflectToAttribute: true,
            },
            messageProperty: {
                type: String,
                value: 'payload',
                reflectToAttribute: true,
            },
            'dynamicSubscriptions': {
                type: Boolean,
                value: false,
                reflectToAttribute: true
            },
            'visible': {
                type: Boolean,
                value: false,
                observer: '_visibleChanged'
            }
        }
    }
    static get feezal() {
        return {
            attributes: [],
            styles: []
        }
    }

    _payloadCast(type, payload) {
        if (typeof payload === 'string') {
            switch (type) {
                case Boolean:
                    return Number(payload) !== 0 && payload.toLowerCase() !== 'false';
                default:
                    return payload;
            }
        } else {
            return payload;
        }
    }

    subscribe(topic, callback) {
        this._subscriptions.push(feezal.connection.subscribe(topic, callback));
    }

    _subscribe() {
        if (!this.subscribeTopic) {
            return;
        }

        const elemClass = window.customElements.get(this.localName);

        this._subscriptions.push(feezal.connection.subscribe(this.subscribeTopic + '/#', msg => {
            let key;
            if (msg.topic === this.subscribeTopic && elemClass.feezal) {
                key = elemClass.feezal.baseAttribute;
            } else {
                key = msg.topic.split('/').pop();
            }

            const type = (elemClass.properties[key] || {}).type;

            const val = this._payloadCast(key === 'style' ? Object : type, this.getProperty(msg, this.messageProperty));
   
            if (key === 'style') {
                Object.assign(this.style, msg.payload);
            } else if (type === Boolean && !val) {
                this.removeAttribute(key);
            } else {
                this.setAttribute(key, val);
            }
        }));
    }

    _unsubscribe() {
        const sub = this._subscriptions.shift();
        if (sub) {
            feezal.connection.unsubscribe(sub);
            this._unsubscribe();
        }
    }

    constructor() {
        super();
        this._subscriptions = [];
    }

    connectedCallback() {
        super.connectedCallback();
        this.classList.add('feezal-element');
        if (feezal.isEditor) {
            /*
            if (!this.shadowRoot.querySelector('.feezal-blocker')) {
                const el = document.createElement('div');
                el.className = 'feezal-blocker';
                this.shadowRoot.prepend(el);
            }
             */
            this.shadowRoot.querySelectorAll('*').forEach(el => {
                if (el.hasAttribute('tabindex')) {
                    el.addEventListener('focus', event => {
                        event.preventDefault();
                        if (event.relatedTarget) {
                            event.relatedTarget.focus();
                        } else {
                            event.currentTarget.blur();
                        }
                    });
                    el.setAttribute('tabindex', '-1');
                }
            });
        } else {
            if (this.visible || !this.dynamicSubscriptions) {
                this._subscribe();
            }
        }
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        this._unsubscribe();
    }

    _visibleChanged(visible) {
        if (feezal.isEditor || !this.dynamicSubscriptions) {
            return;
        }
        if (visible) {
            this._subscribe();
        } else {
            this._unsubscribe();
        }
    }

    // Utils
    throttle(func, limit) {
        let lastFunc;
        let lastRan;
        return function () {
            const context = this;
            const args = arguments;

            if (!lastRan) {
                func.apply(context, args);
                lastRan = Date.now();
            } else {
                clearTimeout(lastFunc);
                this._inThrottle = true;
                lastFunc = setTimeout(function () {
                    if ((Date.now() - lastRan) >= limit) {
                        func.apply(context, args);
                        lastRan = Date.now();
                        this._inThrottle = false;
                    }
                }, limit - (Date.now() - lastRan));
            }
        }
    }

    /**
     * @method split
     * Split str by '.' - supports backslash escaped delimiters
     * @param {string} str
     * @returns {Array.<string>}
     */
    split(str) {
        str = String(str);

        // Use native split if possible
        if (str.indexOf('\\') === -1) {
            return str.split('.');
        }

        var res = []; // The result array
        var pos = 0;  // Starting position of current chunk

        function chunk(start, end) {
            // Slice, unescape and push onto result array.
            res.push(str.slice(start, end).replace(/\\\\/g, '\\').replace(/\\\./g, '.'));
            // Set starting position of next chunk.
            pos = end + 1;
        }

        var esc; // Boolean indicating if a dot is escaped
        var j;
        var i;
        var l = str.length;
        for (i = 0; i < l; i++) {
            if (str[i] === '.') {
                esc = false;
                // Walk over preceding backslashes in reverse direction
                for (j = i - 1; str[j] === '\\'; j--) {
                    esc = !esc;
                }
                // Dot is escaped only if preceded by an odd number of backslashes
                if (!esc) {
                    chunk(pos, i);
                }
            }
        }

        chunk(pos, i);

        return res;
    }

     /**
     * @method getProperty
     * get an objects property. supports nested properties through dot-notation, dots may be escaped by backslash
     * @param {Object} obj
     * @param {string} prop
     * @returns {all} the properties value or undefined
     */
    getProperty(obj, prop) {
        var type = typeof obj;
        if (type !== 'object' && type !== 'function') {
            if (typeof prop === 'undefined') {
                return obj;
            }
            return undefined;
        }
        var arr = this.split(String(prop));
        var res = obj;
        for (let i = 0, l = arr.length; i < l; i++) {
            if (res) {
                res = res[arr[i]];
            }
        }
        return res;
    }
}

window.customElements.define('feezal-element', FeezalElement);

export {FeezalElement, html};
