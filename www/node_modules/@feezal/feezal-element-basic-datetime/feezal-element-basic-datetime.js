import {FeezalElement, html} from "@feezal/feezal-element";

import {zonedTimeToUtc, utcToZonedTime, format} from 'date-fns-tz';

import {be, de, enGB, enUS, es, fr, hr, hu, it, nl, pl, ru} from 'date-fns/locale'
const locales = {be, de, enGB, enUS, es, fr, hr, hu, it, nl, pl, ru};

class FeezalElementBasicDatetime extends FeezalElement {
    static get template() {
        return html`
            <style include="feezal-style-element"></style>
            <span>[[formatedValue]]</span>
        `;
    }
    static get properties() {
        return {
            subscribeTopic: {
                type: String,
                value: '',
                reflectToAttribute: true,
            },
            format: {
                type: String,
                reflectToAttribute: true,
                value: 'cccc, dd. MMMM yyyy H:mm:ss'
            },
            locale: {
                type: String,
                reflectToAttribute: true,
                value: FeezalElementBasicDatetime.getLocale()
            },
            timezone: {
                type: String,
                reflectToAttribute: true,
                value: Intl.DateTimeFormat().resolvedOptions().timeZone
            }
        }
    }
    static getLocale() {
        if (navigator.languages) {
            const languages = [...new Set(navigator.languages.reduce((acc, cur) => {
                return cur.includes('-')
                    ? acc.concat([cur.replace('-', ''), cur.split('-')[0]])
                    : acc.concat([cur])
            }, []))];

            for (let lang of languages) {
                if (Object.keys(locales).includes(lang)) {
                    return lang;
                }
            }
        }
        return 'enUS';
    }

    static isValidTimeZone(tz) {
        try {
            Intl.DateTimeFormat(undefined, {timeZone: tz});
            return true;
        } catch (_) {
            return false;
        }
    }

    static get feezal() {
        return {
            palette: {
                category: 'Basic',
                name: 'Datetime',
                color: '#eee'
            },
            attributes: [
                {
                    name: 'format' // https://date-fns.org/v2.8.1/docs/format
                },
                {
                    name: 'locale',
                    type: 'dropdown',
                    options: Object.keys(locales),
                    validator: val => Object.keys(locales).includes(val)
                },
                {
                    name: 'timezone',
                    validator: FeezalElementBasicDatetime.isValidTimeZone
                }
            ],
            baseAttribute: 'value',
            styles: [
                'top',
                'left',
                'width',
                'height',
                'font',
                'color',
                'text-align',
                'background',
                'border',
                'overflow',
            ],
            restrict: {
                minWidth: 30,
                minHeight: 12
            },
            defaultStyle: {
                width: '160px',
                height: '24px'
            }
        };
    }

    connectedCallback() {
        super.connectedCallback();
        this.interval = setInterval(this._update.bind(this), 1000);
        this._update();
    }

    disconnectedCallback() {
        super.disconnectedCallback();
        clearInterval(this.interval);
    }

    _update() {
        const zonedDate = utcToZonedTime(new Date(), this.timezone);
        const locale = locales[this.locale];
        this.formatedValue = format(zonedDate, this.format, {locale});
    }



}

window.customElements.define('feezal-element-basic-datetime', FeezalElementBasicDatetime);

export {FeezalElementBasicDatetime};